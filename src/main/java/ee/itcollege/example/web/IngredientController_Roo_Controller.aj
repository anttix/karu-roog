// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ee.itcollege.example.web;

import ee.itcollege.example.entities.Ingredient;
import ee.itcollege.example.entities.Menu;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect IngredientController_Roo_Controller {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String IngredientController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("ingredient", Ingredient.findIngredient(id));
        uiModel.addAttribute("itemId", id);
        return "ingredients/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String IngredientController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("ingredients", Ingredient.findIngredientEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Ingredient.countIngredients() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("ingredients", Ingredient.findAllIngredients());
        }
        return "ingredients/list";
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String IngredientController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("ingredient", Ingredient.findIngredient(id));
        return "ingredients/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String IngredientController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Ingredient.findIngredient(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/ingredients";
    }
    
    @ModelAttribute("ingredients")
    public Collection<Ingredient> IngredientController.populateIngredients() {
        return Ingredient.findAllIngredients();
    }
    
    @ModelAttribute("menus")
    public Collection<Menu> IngredientController.populateMenus() {
        return Menu.findAllMenus();
    }
    
    String IngredientController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
